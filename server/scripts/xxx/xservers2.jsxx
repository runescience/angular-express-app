
const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();
const { v4: uuidv4 } = require('uuid');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Create SQLite database connection
const db = new sqlite3.Database('users.db', (err) => {
    if (err) {
        console.error('Error connecting to database:', err);
    } else {
        console.log('Connected to SQLite database');

        // Create roles table
        db.run(`
            CREATE TABLE IF NOT EXISTS roles (
                role_id TEXT PRIMARY KEY,
                role_name TEXT NOT NULL,
                description TEXT,
                created_on DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1
            )
        `);

        // Create users table
        db.run(`
            CREATE TABLE IF NOT EXISTS users (
                user_id TEXT PRIMARY KEY,
                username TEXT NOT NULL,
                email TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                is_active INTEGER DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // Create user_roles junction table for many-to-many relationship
        db.run(`
            CREATE TABLE IF NOT EXISTS user_roles (
                user_id TEXT NOT NULL,
                role_id TEXT NOT NULL,
                PRIMARY KEY (user_id, role_id),
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                FOREIGN KEY (role_id) REFERENCES roles (role_id)
            )
        `);

        // Create question_types table
        db.run(`
            CREATE TABLE IF NOT EXISTS question_types (
                question_type_id TEXT PRIMARY KEY,
                type TEXT NOT NULL UNIQUE,
                is_active INTEGER DEFAULT 1,
                has_regex INTEGER DEFAULT 0,
                regex_str TEXT,
                has_options INTEGER DEFAULT 0,
                options_str TEXT,
                has_supplemental INTEGER DEFAULT 0,
                supplemental_str TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                author TEXT
            )
        `);

        // Create questions table
        db.run(`
            CREATE TABLE IF NOT EXISTS questions (
                question_id TEXT PRIMARY KEY,
                question_text TEXT NOT NULL,
                question_help TEXT,
                question_type_id TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                author TEXT,
                FOREIGN KEY (question_type_id) REFERENCES question_types (question_type_id)
            )
        `);

        // Create workflow_templates table
        db.run(`
            CREATE TABLE IF NOT EXISTS workflow_templates (
                id TEXT PRIMARY KEY,
                title TEXT NOT NULL,
                role_ids TEXT NOT NULL,
                question_ids TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                author TEXT NOT NULL
            )
        `);

        // Create cases table
        db.run(`
            CREATE TABLE IF NOT EXISTS cases (
                id TEXT PRIMARY KEY,
                case_number TEXT UNIQUE NOT NULL,
                workflow_id TEXT NOT NULL,
                current_role_id TEXT NOT NULL,
                current_stage_id TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                modified_by TEXT,
                user_id TEXT,
                author_username TEXT NOT NULL,
                status TEXT DEFAULT 'active',
                FOREIGN KEY (workflow_id) REFERENCES workflow_templates (id),
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        `);

        // Create comments table with self-referential relationship
        db.run(`
            CREATE TABLE IF NOT EXISTS comments (
                comment_id TEXT PRIMARY KEY,
                content TEXT NOT NULL,
                user_id TEXT NOT NULL,
                replying_to_id TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                question_id TEXT,
                case_id TEXT NOT NULL,
                FOREIGN KEY (replying_to_id) REFERENCES comments (comment_id),
                FOREIGN KEY (question_id) REFERENCES questions (question_id),
                FOREIGN KEY (case_id) REFERENCES cases (id)
            )
        `);

        // Create answers table
        db.run(`
            CREATE TABLE IF NOT EXISTS answers (
                id TEXT PRIMARY KEY,
                case_id TEXT,
                case_number TEXT,
                workflow_id TEXT NOT NULL,
                question_id TEXT NOT NULL,
                user_id TEXT,
                answer_text TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (case_id) REFERENCES cases (id),
                FOREIGN KEY (workflow_id) REFERENCES workflow_templates (id),
                FOREIGN KEY (question_id) REFERENCES questions (question_id),
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        `);
    }
});

// Basic route
app.get('/api', (req, res) => {
    res.json({ message: 'Welcome to the Users API' });
});

// Question Types endpoints
app.get('/api/question-types', (req, res) => {
    db.all('SELECT * FROM question_types', [], (err, rows) => {
        if (err) {
            console.error(err);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }
        res.json(rows);
    });
});

app.get('/api/question-types/:id', (req, res) => {
    db.get('SELECT * FROM question_types WHERE question_type_id = ?', [req.params.id], (err, row) => {
        if (err) {
            console.error(err);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }
        if (!row) {
            res.status(404).json({ error: 'Question type not found' });
            return;
        }
        res.json(row);
    });
});

app.post('/api/question-types', (req, res) => {
    const { type, has_regex, regex_str, has_options, options_str, has_supplemental, supplemental_str, author } = req.body;
    const question_type_id = uuidv4().substring(0, 8);

    db.run(
        `INSERT INTO question_types (
            question_type_id, type, has_regex, regex_str, has_options, 
            options_str, has_supplemental, supplemental_str, author
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [question_type_id, type, has_regex, regex_str, has_options, options_str, has_supplemental, supplemental_str, author],
        function (err) {
            if (err) {
                console.error(err);
                res.status(500).json({ error: 'Internal server error' });
                return;
            }
            res.status(201).json({
                question_type_id,
                type,
                has_regex,
                regex_str,
                has_options,
                options_str,
                has_supplemental,
                supplemental_str,
                author
            });
        }
    );
});

// Questions endpoints
app.get('/api/questions', (req, res) => {
    db.all('SELECT * FROM questions', [], (err, rows) => {
        if (err) {
            console.error(err);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }
        res.json(rows);
    });
});

app.get('/api/questions/:id', (req, res) => {
    db.get('SELECT * FROM questions WHERE question_id = ?', [req.params.id], (err, row) => {
        if (err) {
            console.error(err);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }
        if (!row) {
            res.status(404).json({ error: 'Question not found' });
            return;
        }
        res.json(row);
    });
});

app.post('/api/questions', (req, res) => {
    const { question_text, question_help, question_type_id, author } = req.body;
    const question_id = uuidv4().substring(0, 8);

    db.run(
        'INSERT INTO questions (question_id, question_text, question_help, question_type_id, author) VALUES (?, ?, ?, ?, ?)',
        [question_id, question_text, question_help, question_type_id, author],
        function (err) {
            if (err) {
                console.error(err);
                res.status(500).json({ error: 'Internal server error' });
                return;
            }
            res.status(201).json({
                question_id,
                question_text,
                question_help,
                question_type_id,
                author,
                created_at: new Date(),
                updated_at: new Date()
            });
        }
    );
});


// Update a question
app.put('/api/questions/:id', (req, res) => {
    const { question_text, question_help, question_type_id, author } = req.body;
    const { id } = req.params;

    db.run(
        `UPDATE questions
         SET question_text = ?, question_help = ?, question_type_id = ?, author = ?, updated_at = CURRENT_TIMESTAMP
         WHERE question_id = ?`,
        [question_text, question_help, question_type_id, author, id],
        function (err) {
            if (err) {
                console.error(err);
                res.status(500).json({ error: 'Internal server error' });
                return;
            }
            if (this.changes === 0) {
                res.status(404).json({ error: 'Question not found' });
                return;
            }
            res.status(200).json({ message: 'Question updated successfully' });
        }
    );
});

// Delete a question
app.delete('/api/questions/:id', (req, res) => {
    const { id } = req.params;

    db.run(
        'DELETE FROM questions WHERE question_id = ?',
        [id],
        function (err) {
            if (err) {
                console.error(err);
                res.status(500).json({ error: 'Internal server error' });
                return;
            }
            if (this.changes === 0) {
                res.status(404).json({ error: 'Question not found' });
                return;
            }
            res.status(200).json({ message: 'Question deleted successfully' });
        }
    );
});



// Workflow Templates endpoints
app.get('/api/workflow-templates', (req, res) => {
    db.all('SELECT * FROM workflow_templates', [], (err, rows) => {
        if (err) {
            console.error(err);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }
        res.json(rows);
    });
});

app.get('/api/workflow-templates/:id', (req, res) => {
    db.get('SELECT * FROM workflow_templates WHERE id = ?', [req.params.id], (err, row) => {
        if (err) {
            console.error(err);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }
        if (!row) {
            res.status(404).json({ error: 'Workflow template not found' });
            return;
        }
        res.json(row);
    });
});

app.post('/api/workflow-templates', (req, res) => {
    const { title, role_ids, question_ids, author } = req.body;
    const id = uuidv4().substring(0, 8);

    db.run(
        'INSERT INTO workflow_templates (id, title, role_ids, question_ids, author) VALUES (?, ?, ?, ?, ?)',
        [id, title, role_ids, question_ids, author],
        function (err) {
            if (err) {
                console.error(err);
                res.status(500).json({ error: 'Internal server error' });
                return;
            }
            res.status(201).json({
                id,
                title,
                role_ids,
                question_ids,
                author,
                created_at: new Date(),
                updated_at: new Date()
            });
        }
    );
});

// Update a workflow template
app.put('/api/workflow-templates/:id', (req, res) => {
    const { title, role_ids, question_ids, author } = req.body;
    const { id } = req.params;

    db.run(
        `UPDATE workflow_templates
         SET title = ?, role_ids = ?, question_ids = ?, author = ?, updated_at = CURRENT_TIMESTAMP
         WHERE id = ?`,
        [title, role_ids, question_ids, author, id],
        function (err) {
            if (err) {
                console.error(err);
                res.status(500).json({ error: 'Internal server error' });
                return;
            }
            if (this.changes === 0) {
                res.status(404).json({ error: 'Workflow template not found' });
                return;
            }
            res.status(200).json({ message: 'Workflow template updated successfully' });
        }
    );
});

// Delete a workflow template
app.delete('/api/workflow-templates/:id', (req, res) => {
    const { id } = req.params;

    db.run(
        'DELETE FROM workflow_templates WHERE id = ?',
        [id],
        function (err) {
            if (err) {
                console.error(err);
                res.status(500).json({ error: 'Internal server error' });
                return;
            }
            if (this.changes === 0) {
                res.status(404).json({ error: 'Workflow template not found' });
                return;
            }
            res.status(200).json({ message: 'Workflow template deleted successfully' });
        }
    );
});


// Users endpoints

// Get all users
app.get('/api/users', (req, res) => {
    db.all('SELECT * FROM users', [], (err, rows) => {
        if (err) {
            console.error(err);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }
        res.json(rows);
    });
});

// Get user by ID
app.get('/api/users/:id', (req, res) => {
    db.get('SELECT * FROM users WHERE user_id = ?', [req.params.id], (err, row) => {
        if (err) {
            console.error(err);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }
        if (!row) {
            res.status(404).json({ error: 'User not found' });
            return;
        }
        res.json(row);
    });
});

// Create a new user
app.post('/api/users', (req, res) => {
    const { username, email, password_hash, is_active } = req.body;
    const user_id = uuidv4().substring(0, 8);

    db.run(
        'INSERT INTO users (user_id, username, email, password_hash, is_active) VALUES (?, ?, ?, ?, ?)',
        [user_id, username, email, password_hash, is_active],
        function (err) {
            if (err) {
                console.error(err);
                res.status(500).json({ error: 'Internal server error' });
                return;
            }
            res.status(201).json({
                user_id,
                username,
                email,
                is_active,
                created_at: new Date(),
                updated_at: new Date()
            });
        }
    );
});

// Update a user
app.put('/api/users/:id', (req, res) => {
    const { username, email, password_hash, is_active } = req.body;
    const { id } = req.params;

    db.run(
        `UPDATE users
         SET username = ?, email = ?, password_hash = ?, is_active = ?, updated_at = CURRENT_TIMESTAMP
         WHERE user_id = ?`,
        [username, email, password_hash, is_active, id],
        function (err) {
            if (err) {
                console.error(err);
                res.status(500).json({ error: 'Internal server error' });
                return;
            }
            if (this.changes === 0) {
                res.status(404).json({ error: 'User not found' });
                return;
            }
            res.status(200).json({ message: 'User updated successfully' });
        }
    );
});

// Delete a user
app.delete('/api/users/:id', (req, res) => {
    const { id } = req.params;

    db.run(
        'DELETE FROM users WHERE user_id = ?',
        [id],
        function (err) {
            if (err) {
                console.error(err);
                res.status(500).json({ error: 'Internal server error' });
                return;
            }
            if (this.changes === 0) {
                res.status(404).json({ error: 'User not found' });
                return;
            }
            res.status(200).json({ message: 'User deleted successfully' });
        }
    );
});



// Set port and start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, 'localhost', () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
