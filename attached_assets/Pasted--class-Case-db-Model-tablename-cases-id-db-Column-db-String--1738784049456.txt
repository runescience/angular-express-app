
class Case(db.Model):
    __tablename__ = 'cases'

    id = db.Column(db.String,
                   primary_key=True,
                   default=lambda: str(uuid.uuid4())[:8])

    case_number = db.Column(db.String,
                            unique=True,
                            nullable=False,
                            default=lambda: str(uuid.uuid4())[:8])

    workflow_id = db.Column(db.String,
                            db.ForeignKey('workflow_templates.id'),
                            nullable=False)

    current_role_id = db.Column(db.String, nullable=False)

    # New field to link to ApprovalStage
    current_stage_id = db.Column(db.String,
                                 db.ForeignKey('approval_stages.stage_id'),
                                 nullable=True)

    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime,
                           default=datetime.utcnow,
                           onupdate=datetime.utcnow)

    modified_by = db.Column(db.String(100), nullable=True)

    # submitter?
    assigned_user_id = db.Column('user_id',
                                 db.String,
                                 db.ForeignKey('user.user_id'),
                                 nullable=True)

    author_username = db.Column(db.String, nullable=False)

    status = db.Column(
        db.String(20), default='active',
        nullable=True)  # Values: active, pending, abandoned, completed

    # Relationship to comments
    comments = db.relationship('Comment', backref='case', lazy=True)

    workflow_template = db.relationship('WorkflowTemplate',
                                        backref=db.backref('cases', lazy=True))

    # Relationship to ApprovalStage
    approval_stage = db.relationship('ApprovalStage',
                                     backref='cases',
                                     lazy=True)

    # Relationship to User
    user = db.relationship('User', backref='cases', lazy=True)

    def __repr__(self):
        return (f'<Case_number: {self.case_number}, '
                f'case.id {self.id}, '
                f'Workflow {self.workflow_id}, '
                f'stage_id {self.id}, '
                f'Current Role {self.current_role_id}>')

    @property
    def is_late(self):
        return self.created_at + timedelta(days=3) < datetime.utcnow()

    @property
    def is_overdue(self):
        return self.created_at + timedelta(days=7) < datetime.utcnow()
